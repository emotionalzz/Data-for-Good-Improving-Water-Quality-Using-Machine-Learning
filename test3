var water = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
var PP = ee.FeatureCollection('projects/waterexplore-ztc-ztc01216/assets/disjoint_garbage')

//Extract monthly data
var Jan = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 1))
var Feb = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 2))
var Mar = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 3))
var Apr = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 4))
var May = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 5))
var Jun = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 6))
var Jul = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 7))    
var Aug = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 8))    
var Sep = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 9))
var Oct = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 10))
var Nov = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
    .filter(ee.Filter.eq('month', 11))
var Dec = ee.ImageCollection('JRC/GSW1_0/MonthlyHistory')
.filter(ee.Filter.eq('month', 12))

//Convert to list
var List = water.toList(water.size())
var List_1 = Jan.toList(Jan.size())
var List_2 = Feb.toList(Feb.size())
var List_3 = Mar.toList(Mar.size())
var List_4 = Apr.toList(Apr.size())
var List_5 = May.toList(May.size())
var List_6 = Jun.toList(Jun.size())
var List_7 = Jul.toList(Jul.size())
var List_8 = Aug.toList(Aug.size())
var List_9 = Sep.toList(Sep.size())
var List_10 = Oct.toList(Oct.size())
var List_11 = Nov.toList(Nov.size())
var List_12 = Dec.toList(Dec.size())

//generate featurecollection
var geometries = PP.geometry().geometries()

var feature = function(geo){
  var type = ee.Geometry(geo).type()
  return ee.Feature(ee.Geometry(geo), {'type': type})
}

var PP1 = ee.FeatureCollection(geometries.map(feature)).filterMetadata('type', 'equals', 'Polygon') //18108

//add max area
var max_area = ee.Image.pixelArea().multiply(water.first().lt(3)).reduceRegions({
  reducer: ee.Reducer.sum(),
  collection: PP1
})

var PP2 = max_area.select(["sum"], ["max_area"])

var ids = ee.List.sequence(1, PP2.size())

var id = function(feature){
  var id = ee.Feature(feature).id()
  return ee.Feature(feature).set('id', id)
}

var PP3 = PP2.map(id)

//Calculate water pixel area
var rate = function(Feature){
  var rate = ee.Number(ee.Feature(Feature).getNumber('no_data')).divide(ee.Number(ee.Feature(Feature).getNumber('max_area')))
  return ee.Feature(Feature).set('rate', rate)
}

var iaf = function(Feature){
  var iaf = ee.Number(ee.Feature(Feature).getNumber('water')).divide(ee.Number(ee.Feature(Feature).getNumber('max_area')))
  return ee.Feature(Feature).set('iaf', iaf)
}

var computeArea = function(img){
  var water = ee.Image.pixelArea().multiply(ee.Image(img).eq(2)).reduceRegions({
    reducer: ee.Reducer.sum(),
    collection: PP3
  })
  var PP4 = water.select(["max_area", "id", "sum"], ["max_area", "id", "water"])
  var no_data = ee.Image.pixelArea().multiply(ee.Image(img).eq(0)).reduceRegions({
    reducer: ee.Reducer.sum(),
    collection: PP4
  })
  var PP5 = no_data.select(["max_area", "id", "water", "sum"], ["max_area", "id", "water", "no_data"])
  var PP6 = PP5.map(rate)
  var PP7 = PP6.map(iaf)
  var month = ee.Image(img).get('month')
  return PP7.set({'month': month})
}

var area = water.map(computeArea)

var Jan = area.filterMetadata('month', 'equals', 1)
var Feb = area.filterMetadata('month', 'equals', 2)
var Mar = area.filterMetadata('month', 'equals', 3)
var Apr = area.filterMetadata('month', 'equals', 4)
var May = area.filterMetadata('month', 'equals', 5)
var Jun = area.filterMetadata('month', 'equals', 6)
var Jul = area.filterMetadata('month', 'equals', 7)
var Aug = area.filterMetadata('month', 'equals', 8)
var Sep = area.filterMetadata('month', 'equals', 9)
var Oct = area.filterMetadata('month', 'equals', 10)
var Nov = area.filterMetadata('month', 'equals', 11)
var Dec = area.filterMetadata('month', 'equals', 12)


var Jan_fl = Jan.flatten()
var Feb_fl = Feb.flatten()
var Mar_fl = Mar.flatten()
var Apr_fl = Apr.flatten()
var May_fl = May.flatten()
var Jun_fl = Jun.flatten()
var Jul_fl = Jul.flatten()
var Aug_fl = Aug.flatten()
var Sep_fl = Sep.flatten()
var Oct_fl = Oct.flatten()
var Nov_fl = Nov.flatten()
var Dec_fl = Dec.flatten()
//print(Jan_fl.limit(20))

var feature = function(feature){
  var f = ee.Feature(feature)
  var id = f.get('id')
  var iaf = f.get('iaf')
  var rate = f.get('rate')
  return ee.Feature(null, {'id': id, 'iaf': iaf, 'rate': rate})
}

var Jan2 = Jan_fl.map(feature)

//Export.table.toDrive({
//  collection: Jan2,
///  description: 'Jan2',
//  fileFormat: 'CSV'
//});


//print(Jan_fl.size())

var PP2_geo = PP2.geometry().geometries()

var Jan_filter = function(geo){
  return Jan_fl.filterBounds(ee.Geometry(geo))
}

var Feb_filter = function(geo){
  return Feb_fl.filterBounds(ee.Geometry(geo))
}

var Mar_filter = function(geo){
  return Mar_fl.filterBounds(ee.Geometry(geo))
}

var Apr_filter = function(geo){
  return Apr_fl.filterBounds(ee.Geometry(geo))
}

var May_filter = function(geo){
  return May_fl.filterBounds(ee.Geometry(geo))
}

var Jun_filter = function(geo){
  return Jun_fl.filterBounds(ee.Geometry(geo))
}

var Jul_filter = function(geo){
  return Jul_fl.filterBounds(ee.Geometry(geo))
}

var Aug_filter = function(geo){
  return Aug_fl.filterBounds(ee.Geometry(geo))
}

var Sep_filter = function(geo){
  return Sep_fl.filterBounds(ee.Geometry(geo))
}

var Oct_filter = function(geo){
  return Oct_fl.filterBounds(ee.Geometry(geo))
}

var Nov_filter = function(geo){
  return Nov_fl.filterBounds(ee.Geometry(geo))
}

var Dec_filter = function(geo){
  return Dec_fl.filterBounds(ee.Geometry(geo))
}

var Jan_fi = PP2_geo.map(Jan_filter)
var Feb_fi = PP2_geo.map(Feb_filter)
var Mar_fi = PP2_geo.map(Mar_filter)
var Apr_fi = PP2_geo.map(Apr_filter)
var May_fi = PP2_geo.map(May_filter)
var Jun_fi = PP2_geo.map(Jun_filter)
var Jul_fi = PP2_geo.map(Jul_filter)
var Aug_fi = PP2_geo.map(Aug_filter)
var Sep_fi = PP2_geo.map(Sep_filter)
var Oct_fi = PP2_geo.map(Oct_filter)
var Nov_fi = PP2_geo.map(Nov_filter)
var Dec_fi = PP2_geo.map(Dec_filter)

var computeMean = function(collection){
  var re = ee.FeatureCollection(collection).filterMetadata('rate', 'less_than', 0.05)
  var mean = re.aggregate_mean('iaf')
  var id = ee.Feature(ee.FeatureCollection(collection).first()).id()
  return ee.Feature(null, {'id': id, 'iaf_mean': mean})
}

var Jan_mean = ee.FeatureCollection(Jan_fi.map(computeMean))
var Feb_mean = ee.FeatureCollection(Feb_fi.map(computeMean))
var Mar_mean = ee.FeatureCollection(Mar_fi.map(computeMean))
var Apr_mean = ee.FeatureCollection(Apr_fi.map(computeMean))
var May_mean = ee.FeatureCollection(May_fi.map(computeMean))
var Jun_mean = ee.FeatureCollection(Jun_fi.map(computeMean))
var Jul_mean = ee.FeatureCollection(Jul_fi.map(computeMean))
var Aug_mean = ee.FeatureCollection(Aug_fi.map(computeMean))
var Sep_mean = ee.FeatureCollection(Sep_fi.map(computeMean))
var Oct_mean = ee.FeatureCollection(Oct_fi.map(computeMean))
var Nov_mean = ee.FeatureCollection(Nov_fi.map(computeMean))
var Dec_mean = ee.FeatureCollection(Dec_fi.map(computeMean))

//print(Apr_mean.first())
//print(PP2.limit(20))
//print(ee.Feature(PP2.first()).id())

//Export.table.toDrive({
//  collection: Jan_mean,
//  description: 'Jan',
//  fileFormat: 'CSV'
//});

//Filter by ID
var computeMean1 = function(num){
  var filter = Jan_fl.filterMetadata('id', 'equals', ee.Number(num)).filterMetadata('rate', 'less_than', 0.05)
  var mean = filter.aggregate_mean('iaf')
  return ee.Feature(null, {'id': ee.Number(num), 'iaf_mean': mean})
}

var Jan_mean1 = ids.map(computeMean1)

//Export.table.toDrive({
//  collection: Jan_mean1,
//  description: 'Jan1',
//  fileFormat: 'CSV'
//});


//compute mean IAF
var computeIAFmean = function(img){
  var water = ee.Image.pixelArea().multiply(ee.Image(img).eq(2)).reduceRegions({
    reducer: ee.Reducer.sum(),
    collection: PP3
  })
  var PP4 = water.select(["max_area", "id", "sum"], ["max_area", "id", "water"])
  var no_data = ee.Image.pixelArea().multiply(ee.Image(img).eq(0)).reduceRegions({
    reducer: ee.Reducer.sum(),
    collection: PP4
  })
  var PP5 = no_data.select(["max_area", "id", "water", "sum"], ["max_area", "id", "water", "no_data"])
  var PP6 = PP5.map(rate)
  var PP7 = PP6.map(iaf)
  var PP8 = PP7.filterMetadata('rate', 'less_than', 0.05)
  var mean = PP8.aggregate_mean('iaf')
  return mean
}

var mean1 = List_1.map(computeIAFmean)
var mean4 = List_4.map(computeIAFmean)
var mean5 = List_5.map(computeIAFmean)
var mean6 = List_6.map(computeIAFmean)

var m1 = mean1.reduce(ee.Reducer.mean())
var m4 = mean4.reduce(ee.Reducer.mean()) //0.01187138313887308
var m5 = mean5.reduce(ee.Reducer.mean()) //0.010803176108996186
var m6 = mean6.reduce(ee.Reducer.mean())

var std1 = mean1.reduce(ee.Reducer.stdDev())
var std4 = mean4.reduce(ee.Reducer.stdDev()) //0.011435954267521498
var std5 = mean5.reduce(ee.Reducer.stdDev()) //0.011474408726184507
var std6 = mean6.reduce(ee.Reducer.stdDev())

print(m6)
print(std6)
